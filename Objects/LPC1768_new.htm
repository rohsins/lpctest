<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\LPC1768_new.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\LPC1768_new.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060183: Last Updated: Tue Jun 21 16:03:34 2016
<BR><P>
<H3>Maximum Stack Usage =        432 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
net_eth_iface_run &rArr; net_icmp6_process &rArr; net_ndp_process &rArr; ndp_send_reply &rArr; net_icmp6_send &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; debug_info &rArr; net_mac_ntoa &rArr; mac_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[c1]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[31]">rt_alloc_box</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[31]">rt_alloc_box</a><BR>
 <LI><a href="#[5]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">NMI_Handler</a><BR>
 <LI><a href="#[6]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">HardFault_Handler</a><BR>
 <LI><a href="#[7]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">MemManage_Handler</a><BR>
 <LI><a href="#[8]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">BusFault_Handler</a><BR>
 <LI><a href="#[9]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">UsageFault_Handler</a><BR>
 <LI><a href="#[b]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">DebugMon_Handler</a><BR>
 <LI><a href="#[24]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">ADC_IRQHandler</a><BR>
 <LI><a href="#[15c]">net_sys_error</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15c]">net_sys_error</a><BR>
 <LI><a href="#[13b]">net_strtoupper</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13b]">net_strtoupper</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[24]">ADC_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[25]">BOD_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[8]">BusFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[30]">CANActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[27]">CAN_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[6d]">Control</a> from emac_lpc17xx.o(i.Control) referenced from emac_lpc17xx.o(.constdata)
 <LI><a href="#[6c]">ControlTimer</a> from emac_lpc17xx.o(i.ControlTimer) referenced from emac_lpc17xx.o(.constdata)
 <LI><a href="#[28]">DMA_IRQHandler</a> from gpdma_lpc17xx.o(i.DMA_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[b]">DebugMon_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[20]">EINT0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[21]">EINT1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[22]">EINT2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[23]">EINT3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2a]">ENET_IRQHandler</a> from emac_lpc17xx.o(i.ENET_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[60]">GetCapabilities</a> from emac_lpc17xx.o(i.GetCapabilities) referenced from emac_lpc17xx.o(.constdata)
 <LI><a href="#[77]">GetLinkInfo</a> from phy_lan8720.o(i.GetLinkInfo) referenced from phy_lan8720.o(.constdata)
 <LI><a href="#[76]">GetLinkState</a> from phy_lan8720.o(i.GetLinkState) referenced from phy_lan8720.o(.constdata)
 <LI><a href="#[64]">GetMacAddress</a> from emac_lpc17xx.o(i.GetMacAddress) referenced from emac_lpc17xx.o(.constdata)
 <LI><a href="#[69]">GetRxFrameSize</a> from emac_lpc17xx.o(i.GetRxFrameSize) referenced from emac_lpc17xx.o(.constdata)
 <LI><a href="#[6a]">GetRxFrameTime</a> from emac_lpc17xx.o(i.GetRxFrameTime) referenced from emac_lpc17xx.o(.constdata)
 <LI><a href="#[6b]">GetTxFrameTime</a> from emac_lpc17xx.o(i.GetTxFrameTime) referenced from emac_lpc17xx.o(.constdata)
 <LI><a href="#[5f]">GetVersion</a> from emac_lpc17xx.o(i.GetVersion) referenced 2 times from emac_lpc17xx.o(.constdata)
 <LI><a href="#[6]">HardFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[18]">I2C0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[19]">I2C1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1a]">I2C2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[29]">I2S_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[61]">Initialize</a> from emac_lpc17xx.o(i.Initialize) referenced 2 times from emac_lpc17xx.o(.constdata)
 <LI><a href="#[2c]">MCPWM_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[7]">MemManage_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[5]">NMI_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[6e]">PHY_Read</a> from emac_lpc17xx.o(i.PHY_Read) referenced from emac_lpc17xx.o(.constdata)
 <LI><a href="#[6f]">PHY_Write</a> from emac_lpc17xx.o(i.PHY_Write) referenced from emac_lpc17xx.o(.constdata)
 <LI><a href="#[1e]">PLL0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2e]">PLL1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[17]">PWM1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[c]">PendSV_Handler</a> from hal_cm3.o(.emb_text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[63]">PowerControl</a> from emac_lpc17xx.o(i.PowerControl) referenced 2 times from emac_lpc17xx.o(.constdata)
 <LI><a href="#[2d]">QEI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2b]">RIT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1f]">RTC_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[68]">ReadFrame</a> from emac_lpc17xx.o(i.ReadFrame) referenced from emac_lpc17xx.o(.constdata)
 <LI><a href="#[4]">Reset_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1b]">SPI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1c]">SSP0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1d]">SSP1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[a]">SVC_Handler</a> from hal_cm3.o(.emb_text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[67]">SendFrame</a> from emac_lpc17xx.o(i.SendFrame) referenced from emac_lpc17xx.o(.constdata)
 <LI><a href="#[66]">SetAddressFilter</a> from emac_lpc17xx.o(i.SetAddressFilter) referenced from emac_lpc17xx.o(.constdata)
 <LI><a href="#[74]">SetInterface</a> from phy_lan8720.o(i.SetInterface) referenced from phy_lan8720.o(.constdata)
 <LI><a href="#[65]">SetMacAddress</a> from emac_lpc17xx.o(i.SetMacAddress) referenced from emac_lpc17xx.o(.constdata)
 <LI><a href="#[75]">SetMode</a> from phy_lan8720.o(i.SetMode) referenced from phy_lan8720.o(.constdata)
 <LI><a href="#[d]">SysTick_Handler</a> from hal_cm3.o(.emb_text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[33]">SystemInit</a> from system_lpc17xx.o(i.SystemInit) referenced from startup_lpc17xx.o(.text)
 <LI><a href="#[f]">TIMER0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[10]">TIMER1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[11]">TIMER2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[12]">TIMER3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[13]">UART0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[14]">UART1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[15]">UART2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[16]">UART3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2f]">USBActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[26]">USB_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[62]">Uninitialize</a> from emac_lpc17xx.o(i.Uninitialize) referenced 2 times from emac_lpc17xx.o(.constdata)
 <LI><a href="#[9]">UsageFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[e]">WDT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[3c]">tcp_cb_func(int, netTCP_Event, const net_addr*, const unsigned char*, unsigned)</a> from main.o(i._Z11tcp_cb_funci12netTCP_EventPK8net_addrPKhj) referenced from main.o(i._Z12socketListenv)
 <LI><a href="#[3d]">ethernetEvent(unsigned)</a> from main.o(i._Z13ethernetEventj) referenced from main.o(i._Z18ethernetInitializev)
 <LI><a href="#[5c]">heartBeatThread(const void*)</a> from main.o(i._Z15heartBeatThreadPKv) referenced from main.o(.constdata)
 <LI><a href="#[5b]">initializeThread(const void*)</a> from main.o(i._Z16initializeThreadPKv) referenced from main.o(.constdata)
 <LI><a href="#[8b]">__main</a> from __main.o(!!!main) referenced from startup_lpc17xx.o(.text)
 <LI><a href="#[3b]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[38]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[37]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[39]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[36]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[35]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
 <LI><a href="#[40]">dhcp6_listener</a> from net_dhcp6_client.o(i.dhcp6_listener) referenced from net_dhcp6_client.o(i.net_dhcp6_client_init)
 <LI><a href="#[41]">dhcp_listener</a> from net_dhcp_client.o(i.dhcp_listener) referenced from net_dhcp_client.o(i.net_dhcp_client_init)
 <LI><a href="#[42]">eth_notify</a> from net_eth.o(i.eth_notify) referenced from net_eth.o(i.net_eth_iface_init)
 <LI><a href="#[3a]">isspace</a> from isspace.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[5e]">main</a> from main.o(i.main) referenced from rtx_conf_cm.o(.constdata)
 <LI><a href="#[43]">nbns_listener</a> from net_nbns_client.o(i.nbns_listener) referenced from net_nbns_client.o(i.net_nbns_client_init)
 <LI><a href="#[78]">netCore_Thread</a> from net_sys.o(i.netCore_Thread) referenced from net_config.o(.constdata)
 <LI><a href="#[79]">netETH_Thread</a> from net_eth.o(i.netETH_Thread) referenced from net_config.o(.constdata)
 <LI><a href="#[83]">net_bsd_socket_init</a> from net_bsd.o(i.net_bsd_socket_init) referenced from net_config.o(.constdata)
 <LI><a href="#[84]">net_bsd_socket_run</a> from net_bsd.o(i.net_bsd_socket_run) referenced from net_config.o(.constdata)
 <LI><a href="#[88]">net_dhcp6_client_init</a> from net_dhcp6_client.o(i.net_dhcp6_client_init) referenced from net_config.o(.constdata)
 <LI><a href="#[89]">net_dhcp6_client_run</a> from net_dhcp6_client.o(i.net_dhcp6_client_run) referenced from net_config.o(.constdata)
 <LI><a href="#[86]">net_dhcp_client_init</a> from net_dhcp_client.o(i.net_dhcp_client_init) referenced from net_config.o(.constdata)
 <LI><a href="#[87]">net_dhcp_client_run</a> from net_dhcp_client.o(i.net_dhcp_client_run) referenced from net_config.o(.constdata)
 <LI><a href="#[7a]">net_eth_iface_init</a> from net_eth.o(i.net_eth_iface_init) referenced from net_config.o(.constdata)
 <LI><a href="#[7b]">net_eth_iface_run</a> from net_eth.o(i.net_eth_iface_run) referenced from net_config.o(.constdata)
 <LI><a href="#[7c]">net_loop_iface_init</a> from net_loop.o(i.net_loop_iface_init) referenced from net_config.o(.constdata)
 <LI><a href="#[7d]">net_loop_iface_run</a> from net_loop.o(i.net_loop_iface_run) referenced from net_config.o(.constdata)
 <LI><a href="#[85]">net_nbns_client_init</a> from net_nbns_client.o(i.net_nbns_client_init) referenced from net_config.o(.constdata)
 <LI><a href="#[7e]">net_ping_client_init</a> from net_ping.o(i.net_ping_client_init) referenced from net_config.o(.constdata)
 <LI><a href="#[7f]">net_ping_client_run</a> from net_ping.o(i.net_ping_client_run) referenced from net_config.o(.constdata)
 <LI><a href="#[8a]">net_sys_tick</a> from net_sys.o(i.net_sys_tick) referenced from net_sys.o(.constdata)
 <LI><a href="#[81]">net_tcp_socket_init</a> from net_tcp.o(i.net_tcp_socket_init) referenced from net_config.o(.constdata)
 <LI><a href="#[82]">net_tcp_socket_run</a> from net_tcp.o(i.net_tcp_socket_run) referenced from net_config.o(.constdata)
 <LI><a href="#[80]">net_udp_socket_init</a> from net_udp.o(i.net_udp_socket_init) referenced from net_config.o(.constdata)
 <LI><a href="#[5a]">osThreadExit</a> from rt_cmsis.o(i.osThreadExit) referenced from rt_cmsis.o(i.svcThreadCreate)
 <LI><a href="#[5d]">osTimerThread</a> from rt_cmsis.o(i.osTimerThread) referenced from rtx_conf_cm.o(.constdata)
 <LI><a href="#[59]">os_idle_demon</a> from rtx_conf_cm.o(i.os_idle_demon) referenced from rt_task.o(i.rt_sys_init)
 <LI><a href="#[31]">rt_alloc_box</a> from rt_membox.o(i.rt_alloc_box) referenced from hal_cm3.o(.emb_text)
 <LI><a href="#[32]">rt_free_box</a> from rt_membox.o(i.rt_free_box) referenced from hal_cm3.o(.emb_text)
 <LI><a href="#[3f]">rt_mut_release</a> from rt_mutex.o(i.rt_mut_release) referenced from rtx_conf_cm.o(i._mutex_release)
 <LI><a href="#[3e]">rt_mut_wait</a> from rt_mutex.o(i.rt_mut_wait) referenced from rtx_conf_cm.o(i._mutex_acquire)
 <LI><a href="#[44]">svcDelay</a> from rt_cmsis.o(i.svcDelay) referenced from rt_cmsis.o(i.osDelay)
 <LI><a href="#[45]">svcKernelInitialize</a> from rt_cmsis.o(i.svcKernelInitialize) referenced from rt_cmsis.o(i.osKernelInitialize)
 <LI><a href="#[46]">svcKernelStart</a> from rt_cmsis.o(i.svcKernelStart) referenced from rt_cmsis.o(i.osKernelStart)
 <LI><a href="#[47]">svcKernelSysTick</a> from rt_cmsis.o(i.svcKernelSysTick) referenced from rt_cmsis.o(i.osKernelSysTick)
 <LI><a href="#[48]">svcMessageGet</a> from rt_cmsis.o(i.svcMessageGet) referenced from rt_cmsis.o(i.osMessageGet)
 <LI><a href="#[49]">svcMutexCreate</a> from rt_cmsis.o(i.svcMutexCreate) referenced from rt_cmsis.o(i.osMutexCreate)
 <LI><a href="#[4a]">svcMutexRelease</a> from rt_cmsis.o(i.svcMutexRelease) referenced from rt_cmsis.o(i.osMutexRelease)
 <LI><a href="#[4b]">svcMutexWait</a> from rt_cmsis.o(i.svcMutexWait) referenced from rt_cmsis.o(i.osMutexWait)
 <LI><a href="#[4c]">svcSemaphoreCreate</a> from rt_cmsis.o(i.svcSemaphoreCreate) referenced from rt_cmsis.o(i.osSemaphoreCreate)
 <LI><a href="#[4d]">svcSemaphoreRelease</a> from rt_cmsis.o(i.svcSemaphoreRelease) referenced from rt_cmsis.o(i.osSemaphoreRelease)
 <LI><a href="#[4e]">svcSemaphoreWait</a> from rt_cmsis.o(i.svcSemaphoreWait) referenced from rt_cmsis.o(i.osSemaphoreWait)
 <LI><a href="#[4f]">svcSignalClear</a> from rt_cmsis.o(i.svcSignalClear) referenced from rt_cmsis.o(i.osSignalClear)
 <LI><a href="#[50]">svcSignalSet</a> from rt_cmsis.o(i.svcSignalSet) referenced from rt_cmsis.o(i.osSignalSet)
 <LI><a href="#[51]">svcSignalWait</a> from rt_cmsis.o(i.svcSignalWait) referenced from rt_cmsis.o(i.osSignalWait)
 <LI><a href="#[52]">svcThreadCreate</a> from rt_cmsis.o(i.svcThreadCreate) referenced from rt_cmsis.o(i.osThreadCreate)
 <LI><a href="#[53]">svcThreadGetId</a> from rt_cmsis.o(i.svcThreadGetId) referenced from rt_cmsis.o(i.osThreadExit)
 <LI><a href="#[54]">svcThreadTerminate</a> from rt_cmsis.o(i.svcThreadTerminate) referenced from rt_cmsis.o(i.osThreadExit)
 <LI><a href="#[55]">svcThreadYield</a> from rt_cmsis.o(i.svcThreadYield) referenced from rt_cmsis.o(i.osThreadYield)
 <LI><a href="#[56]">svcTimerCall</a> from rt_cmsis.o(i.svcTimerCall) referenced from rt_cmsis.o(i.osTimerCall)
 <LI><a href="#[57]">svcTimerCreate</a> from rt_cmsis.o(i.svcTimerCreate) referenced from rt_cmsis.o(i.osTimerCreate)
 <LI><a href="#[58]">svcTimerStart</a> from rt_cmsis.o(i.svcTimerStart) referenced from rt_cmsis.o(i.osTimerStart)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[8b]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[8e]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[90]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1e5]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1e6]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[91]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[1e7]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[92]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[b2]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[94]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[1e8]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[9c]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[1e9]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[1ea]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[96]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_common &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[1eb]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1ec]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[1ed]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[1ee]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[98]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[1ef]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1f0]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1f1]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1f2]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1f3]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1f4]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1f5]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1f6]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1f7]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1f8]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1f9]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1fa]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1fb]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[1fc]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1fd]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[a2]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1fe]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[1ff]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[200]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[201]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[202]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[203]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[204]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[8f]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[205]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[99]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[9b]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[206]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[9d]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = __rt_entry_postli_1 &rArr; _platform_post_lib_init &rArr; osKernelInitialize &rArr; svcKernelInitialize &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_lib_init
</UL>

<P><STRONG><a name="[9f]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; ethernetConfig() &rArr; netDHCP_Disable &rArr; dhcp_client_stop &rArr; net_addr4_aton &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[b7]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[a1]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[207]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[a3]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[9e]"></a>_platform_post_lib_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_conf_cm.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _platform_post_lib_init &rArr; osKernelInitialize &rArr; svcKernelInitialize &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_postli_1
</UL>

<P><STRONG><a name="[159]"></a>net_version</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_sys.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
</UL>

<P><STRONG><a name="[208]"></a>rt_set_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[1d1]"></a>rt_get_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[209]"></a>os_set_env</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[20a]"></a>_alloc_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[20b]"></a>_free_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[a]"></a>SVC_Handler</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PendSV_Handler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = PendSV_Handler &rArr; rt_pop_req &rArr; rt_mbx_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SysTick_Handler &rArr; rt_systick &rArr; sysTimerTick &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>OS_Tick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_irqack
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[20c]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[20d]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[20e]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[20f]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[35]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[4]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>CANActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>PLL0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>PLL1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>RIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USBActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c1]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[cd]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerStart
</UL>

<P><STRONG><a name="[210]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mac_ntoa
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_ntoa
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_ntoa
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
</UL>

<P><STRONG><a name="[bc]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[bd]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[93]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[95]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[211]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>__printf</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[b3]"></a>__0sscanf</STRONG> (Thumb, 52 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netMAC_aton
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_aton
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_aton
</UL>

<P><STRONG><a name="[b5]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[a0]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_lib_init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[104]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_prefix_add
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_is_onlink
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp6_listener
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_process
</UL>

<P><STRONG><a name="[15f]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSYS_SetHostName
</UL>

<P><STRONG><a name="[108]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_send_echo
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_send_echo
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_server
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp6_send_message
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_send_frame
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_process
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_set_option
</UL>

<P><STRONG><a name="[b8]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[212]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartBeatThread(const void*)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[213]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[214]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[215]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_cb_func(int, netTCP_Event, const net_addr*, const unsigned char*, unsigned)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send_message
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_init
</UL>

<P><STRONG><a name="[ba]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[216]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_socket_init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp6_client_init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_bsd_socket_init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_listen
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_init
</UL>

<P><STRONG><a name="[217]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[218]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[da]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartBeatThread(const void*)
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[af]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[ae]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[b6]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[b4]"></a>__vfscanf_char</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[36]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[37]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[3a]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isspace &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[be]"></a>__vfscanf</STRONG> (Thumb, 878 bytes, Stack size 96 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[a4]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[9a]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[bf]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[219]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[21a]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>__rt_locale</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_locale_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[21b]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[28]"></a>DMA_IRQHandler</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, gpdma_lpc17xx.o(i.DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Channel_active_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>ENET_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, emac_lpc17xx.o(i.ENET_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ENET_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[11d]"></a>GPIO_PinWrite</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, gpio_lpc17xx.o(i.GPIO_PinWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnaround_MDIO
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_MDIO
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_MDIO
</UL>

<P><STRONG><a name="[11e]"></a>GPIO_PortRead</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio_lpc17xx.o(i.GPIO_PortRead))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_MDIO
</UL>

<P><STRONG><a name="[c6]"></a>GPIO_SetDir</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, gpio_lpc17xx.o(i.GPIO_SetDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_SetDir
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnaround_MDIO
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uninitialize
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Write
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Read
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
</UL>

<P><STRONG><a name="[c5]"></a>PIN_Configure</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, pin_lpc17xx.o(i.PIN_Configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PIN_Configure
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uninitialize
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
</UL>

<P><STRONG><a name="[cc]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 408 bytes, Stack size 32 bytes, system_lpc17xx.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SystemCoreClockUpdate &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[33]"></a>SystemInit</STRONG> (Thumb, 302 bytes, Stack size 0 bytes, system_lpc17xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(.text)
</UL>
<P><STRONG><a name="[3c]"></a>tcp_cb_func(int, netTCP_Event, const net_addr*, const unsigned char*, unsigned)</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, main.o(i._Z11tcp_cb_funci12netTCP_EventPK8net_addrPKhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_cb_func(int, netTCP_Event, const net_addr*, const unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._Z12socketListenv)
</UL>
<P><STRONG><a name="[cf]"></a>socketListen()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(i._Z12socketListenv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = socketListen() &rArr; netTCP_SetOption &rArr; net_tcp_set_option
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTCP_SetOption
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTCP_Listen
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTCP_GetSocket
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3d]"></a>ethernetEvent(unsigned)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i._Z13ethernetEventj))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._Z18ethernetInitializev)
</UL>
<P><STRONG><a name="[db]"></a>ledInitialize()</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, main.o(i._Z13ledInitializev))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeThread(const void*)
</UL>

<P><STRONG><a name="[d3]"></a>ethernetConfig()</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, main.o(i._Z14ethernetConfigv))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ethernetConfig() &rArr; netDHCP_Disable &rArr; dhcp_client_stop &rArr; net_addr4_aton &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSYS_SetHostName
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netMAC_aton
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netIP_aton
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netIF_SetOption
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netDHCP_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5c]"></a>heartBeatThread(const void*)</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, main.o(i._Z15heartBeatThreadPKv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = heartBeatThread(const void*) &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>initializeThread(const void*)</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, main.o(i._Z16initializeThreadPKv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = initializeThread(const void*)
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledInitialize()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[136]"></a>ethernetInitialize()</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, main.o(i._Z18ethernetInitializev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ethernetInitialize()
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c9]"></a>_init_box</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, rt_membox.o(i._init_box))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _init_box
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[b1]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[8c]"></a>_mutex_acquire</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtx_conf_cm.o(i._mutex_acquire), UNUSED, KEPT)

<P><STRONG><a name="[8d]"></a>_mutex_release</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_conf_cm.o(i._mutex_release), UNUSED, KEPT)

<P><STRONG><a name="[1c8]"></a>dbg_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hal_cm.o(i.dbg_init))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[1cf]"></a>dbg_task_notify</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hal_cm.o(i.dbg_task_notify))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
</UL>

<P><STRONG><a name="[1c6]"></a>dbg_task_switch</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_cm.o(i.dbg_task_switch))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
</UL>

<P><STRONG><a name="[127]"></a>isrMessageGet</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, rt_cmsis.o(i.isrMessageGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = isrMessageGet &rArr; isr_mbx_receive &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
</UL>

<P><STRONG><a name="[129]"></a>isrMessagePut</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, rt_cmsis.o(i.isrMessagePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_check
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
</UL>

<P><STRONG><a name="[12c]"></a>isrSemaphoreRelease</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rt_cmsis.o(i.isrSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_sem_send
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>

<P><STRONG><a name="[12f]"></a>isrSignalSet</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, rt_cmsis.o(i.isrSignalSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = isrSignalSet &rArr; isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tid2ptcb
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_evt_set
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalSet
</UL>

<P><STRONG><a name="[131]"></a>isr_evt_set</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rt_event.o(i.isr_evt_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrSignalSet
</UL>

<P><STRONG><a name="[128]"></a>isr_mbx_receive</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, rt_mailbox.o(i.isr_mbx_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_mbx_receive &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessageGet
</UL>

<P><STRONG><a name="[12b]"></a>isr_mbx_send</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rt_mailbox.o(i.isr_mbx_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
</UL>

<P><STRONG><a name="[12e]"></a>isr_sem_send</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_semaphore.o(i.isr_sem_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrSemaphoreRelease
</UL>

<P><STRONG><a name="[5e]"></a>main</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = main &rArr; ethernetConfig() &rArr; netDHCP_Disable &rArr; dhcp_client_stop &rArr; net_addr4_aton &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetInitialize()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetConfig()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketListen()
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_conf_cm.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>netCore_Thread</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, net_sys.o(i.netCore_Thread))
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_proc_tick
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadYield
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalWait
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[105]"></a>netDHCP6_Notify</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, net_dhcp6_client.o(i.netDHCP6_Notify))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp6_client_run
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp6_listener
</UL>

<P><STRONG><a name="[d7]"></a>netDHCP_Disable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, net_dhcp_client.o(i.netDHCP_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = netDHCP_Disable &rArr; dhcp_client_stop &rArr; net_addr4_aton &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_client_stop
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetConfig()
</UL>

<P><STRONG><a name="[10f]"></a>netDHCP_Notify</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, net_dhcp_client.o(i.netDHCP_Notify))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp_client_run
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_req
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_client_stop
</UL>

<P><STRONG><a name="[171]"></a>netETH_Notify</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, net_eth.o(i.netETH_Notify))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
</UL>

<P><STRONG><a name="[79]"></a>netETH_Thread</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, net_eth.o(i.netETH_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = netETH_Thread &rArr; eth_receive &rArr; net_sys_wakeup &rArr; osSignalSet &rArr; isrSignalSet &rArr; isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_unlock
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_receive
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_lock
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_check_link
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalWait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[d6]"></a>netIF_SetOption</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, net_sys.o(i.netIF_SetOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = netIF_SetOption &rArr; net_eth_set_option &rArr; eth_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_slip_set_option
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ppp_set_option
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_set_option
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetConfig()
</UL>

<P><STRONG><a name="[d8]"></a>netIP_aton</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, net_addr.o(i.netIP_aton))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = netIP_aton &rArr; net_addr6_aton &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_aton
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_aton
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetConfig()
</UL>

<P><STRONG><a name="[135]"></a>netInitialize</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, net_sys.o(i.netInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = netInitialize &rArr; osThreadCreate &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_debug_init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_version
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_strcpy
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerCreate
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d5]"></a>netMAC_aton</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, net_addr.o(i.netMAC_aton))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = netMAC_aton &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetConfig()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
</UL>

<P><STRONG><a name="[d4]"></a>netSYS_SetHostName</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, net_sys.o(i.netSYS_SetHostName))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = netSYS_SetHostName &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_strcpy
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetConfig()
</UL>

<P><STRONG><a name="[d0]"></a>netTCP_GetSocket</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, net_tcp.o(i.netTCP_GetSocket))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = netTCP_GetSocket &rArr; net_tcp_get_socket
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_get_socket
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketListen()
</UL>

<P><STRONG><a name="[d1]"></a>netTCP_Listen</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, net_tcp.o(i.netTCP_Listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = netTCP_Listen &rArr; net_tcp_listen &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_listen
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketListen()
</UL>

<P><STRONG><a name="[d2]"></a>netTCP_SetOption</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, net_tcp.o(i.netTCP_SetOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = netTCP_SetOption &rArr; net_tcp_set_option
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_set_option
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketListen()
</UL>

<P><STRONG><a name="[10e]"></a>net_addr4_aton</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, net_addr.o(i.net_addr4_aton))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = net_addr4_aton &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netIP_aton
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_client_stop
</UL>

<P><STRONG><a name="[122]"></a>net_addr4_is_subnet</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, net_addr.o(i.net_addr4_is_subnet))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_get_route
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_find
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_early
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_add
</UL>

<P><STRONG><a name="[ed]"></a>net_addr4_ntoa</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_addr.o(i.net_addr4_ntoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = net_addr4_ntoa &rArr; ip4_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_ntoa
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_req
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
</UL>

<P><STRONG><a name="[156]"></a>net_addr6_aton</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, net_addr.o(i.net_addr6_aton))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = net_addr6_aton &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netIP_aton
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
</UL>

<P><STRONG><a name="[125]"></a>net_addr6_comp</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, net_addr.o(i.net_addr6_comp))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_proc_response
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_cache_delete
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_cache_add
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_ia_na
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_map_socket
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_refresh
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_find
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_chk_frame
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_process
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_get_route
</UL>

<P><STRONG><a name="[fd]"></a>net_addr6_copy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, net_addr.o(i.net_addr6_copy))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp6_client_run
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_send_request
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_send_reply
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_router_remove
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_cache_add
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_ia_na
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp6_send_message
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp6_listener
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp6_client_start
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_map_socket
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_send_frame
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_process
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_find
</UL>

<P><STRONG><a name="[143]"></a>net_addr6_create</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, net_addr.o(i.net_addr6_create))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_slaac_run
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_prefix_add
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_init
</UL>

<P><STRONG><a name="[18a]"></a>net_addr6_get_solicited</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, net_addr.o(i.net_addr6_get_solicited))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_send
</UL>

<P><STRONG><a name="[199]"></a>net_addr6_is_linklocal</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, net_addr.o(i.net_addr6_is_linklocal))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_find
</UL>

<P><STRONG><a name="[141]"></a>net_addr6_is_onlink</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, net_addr.o(i.net_addr6_is_onlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = net_addr6_is_onlink
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_is_onlink
</UL>

<P><STRONG><a name="[195]"></a>net_addr6_is_solicited</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, net_addr.o(i.net_addr6_is_solicited))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_chk_frame
</UL>

<P><STRONG><a name="[166]"></a>net_addr6_is_unspec</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, net_addr.o(i.net_addr6_is_unspec))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_get_local
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_is_unspec
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_find
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_update_filter
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
</UL>

<P><STRONG><a name="[f2]"></a>net_addr6_ntoa</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_addr.o(i.net_addr6_ntoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = net_addr6_ntoa &rArr; ip6_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_ntoa
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_slaac_run
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_send_request
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_send_reply
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_prefix_add
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_ia_na
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp6_listener
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
</UL>

<P><STRONG><a name="[163]"></a>net_addr_get_local</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_addr.o(i.net_addr_get_local))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_addr_get_local &rArr; net_ip6_get_local &rArr; ip6_get_route
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_get_local
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_get_local
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send
</UL>

<P><STRONG><a name="[165]"></a>net_addr_is_unspec</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, net_addr.o(i.net_addr_is_unspec))
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_is_unspec
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send
</UL>

<P><STRONG><a name="[167]"></a>net_arp_cache_add</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, net_arp.o(i.net_arp_cache_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = net_arp_cache_add &rArr; debug_inf2 &rArr; net_mac_ntoa &rArr; mac_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_is_cacheable
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_alloc
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_is_subnet
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_process
</UL>

<P><STRONG><a name="[169]"></a>net_arp_cache_early</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, net_arp.o(i.net_arp_cache_early))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = net_arp_cache_early &rArr; arp_send_request &rArr; debug_info &rArr; net_mac_ntoa &rArr; mac_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_is_cacheable
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_alloc
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_is_subnet
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[16a]"></a>net_arp_cache_find</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, net_arp.o(i.net_arp_cache_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = net_arp_cache_find &rArr; arp_send_request &rArr; debug_info &rArr; net_mac_ntoa &rArr; mac_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_alloc
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_is_subnet
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
</UL>

<P><STRONG><a name="[16b]"></a>net_arp_init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, net_arp.o(i.net_arp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_arp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
</UL>

<P><STRONG><a name="[110]"></a>net_arp_notify</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, net_arp.o(i.net_arp_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = net_arp_notify &rArr; arp_send_request &rArr; debug_info &rArr; net_mac_ntoa &rArr; mac_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp_client_run
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_client_stop
</UL>

<P><STRONG><a name="[16c]"></a>net_arp_probe</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_arp.o(i.net_arp_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = net_arp_probe &rArr; arp_send_request &rArr; debug_info &rArr; net_mac_ntoa &rArr; mac_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp_client_run
</UL>

<P><STRONG><a name="[16d]"></a>net_arp_process</STRONG> (Thumb, 390 bytes, Stack size 24 bytes, net_arp.o(i.net_arp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = net_arp_process &rArr; arp_send_reply &rArr; debug_info &rArr; net_mac_ntoa &rArr; mac_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_proc_response
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_add
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[16e]"></a>net_arp_run</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, net_arp.o(i.net_arp_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = net_arp_run &rArr; arp_probe_run &rArr; arp_send_request &rArr; debug_info &rArr; net_mac_ntoa &rArr; mac_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_probe_run
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[e9]"></a>net_bsd_notify</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, net_bsd.o(i.net_bsd_notify))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_enable
</UL>

<P><STRONG><a name="[e8]"></a>net_bsd_resume</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, net_bsd.o(i.net_bsd_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = net_bsd_resume &rArr; osSignalSet &rArr; isrSignalSet &rArr; isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalSet
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_enable
</UL>

<P><STRONG><a name="[83]"></a>net_bsd_socket_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, net_bsd.o(i.net_bsd_socket_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = net_bsd_socket_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>net_bsd_socket_run</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, net_bsd.o(i.net_bsd_socket_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = net_bsd_socket_run &rArr; bsd_enable &rArr; net_bsd_resume &rArr; osSignalSet &rArr; isrSignalSet &rArr; isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_enable
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_listen
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_get_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[dd]"></a>net_dbg_error</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_debug.o(i.net_dbg_error))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_nbns_client_init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp_client_run
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp_client_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp6_client_init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_proc_response
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_cache_add
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_proc_response
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_alloc
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_ia_na
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp6_listener
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_set_option
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_listen
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_get_socket
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_map_socket
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_send_frame
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_open
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_get_socket
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_get_buf
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_close
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_send_frame
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_process
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_find
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_chk_frame
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chk_frame
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_process
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_process
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_find
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_add
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
</UL>

<P><STRONG><a name="[df]"></a>net_dbg_info</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_debug.o(i.net_dbg_info))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSYS_SetHostName
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_socket_init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ping_client_run
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ping_client_init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_nbns_client_init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_run
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp_client_run
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp_client_init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp6_client_run
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp6_client_init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_bsd_socket_init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_send
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_slaac_run
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_send_request
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_send_reply
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_proc_response
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_probe_run
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_prefix_add
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_cache_delete
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_cache_add
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_proc_response
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_probe_run
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_ia_na
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp6_send_message
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp6_listener
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp6_client_start
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_req
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_renew
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send_message
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_client_stop
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_client_start
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_set_option
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_listen
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_get_socket
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_cwnd
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_data
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_resend
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_proc_dupack
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_proc_acknr
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parse_opt
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_send_frame
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_open
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_get_socket
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_close
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_send_frame
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_process
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_run
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_refresh
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_find
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_chk_frame
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chk_frame
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_process
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_run
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_process
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_find
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_early
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_add
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
</UL>

<P><STRONG><a name="[158]"></a>net_debug_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, net_debug.o(i.net_debug_init))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
</UL>

<P><STRONG><a name="[88]"></a>net_dhcp6_client_init</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, net_dhcp6_client.o(i.net_dhcp6_client_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = net_dhcp6_client_init &rArr; dhcp6_client_start &rArr; net_udp_open &rArr; udp_port_in_use
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp6_client_start
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_get_socket
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>net_dhcp6_client_run</STRONG> (Thumb, 706 bytes, Stack size 32 bytes, net_dhcp6_client.o(i.net_dhcp6_client_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = net_dhcp6_client_run &rArr; dhcp6_send_message &rArr; net_udp_send &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; debug_info &rArr; net_mac_ntoa &rArr; mac_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netDHCP6_Notify
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tout
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp6_send_message
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_rand32
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_copy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>net_dhcp_client_init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, net_dhcp_client.o(i.net_dhcp_client_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = net_dhcp_client_init &rArr; dhcp_client_start &rArr; net_udp_open &rArr; udp_port_in_use
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_client_start
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_get_socket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>net_dhcp_client_run</STRONG> (Thumb, 684 bytes, Stack size 40 bytes, net_dhcp_client.o(i.net_dhcp_client_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = net_dhcp_client_run &rArr; dhcp_send_message &rArr; net_udp_send &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; debug_info &rArr; net_mac_ntoa &rArr; mac_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netDHCP_Notify
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_probe
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_notify
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send_message
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_rand32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>net_eth_iface_init</STRONG> (Thumb, 592 bytes, Stack size 24 bytes, net_eth.o(i.net_eth_iface_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = net_eth_iface_init &rArr; net_addr6_aton &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netMAC_aton
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Notify
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_memcrc
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mac_ntoa
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_aton
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_aton
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>net_eth_iface_run</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, net_eth.o(i.net_eth_iface_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = net_eth_iface_run &rArr; net_icmp6_process &rArr; net_ndp_process &rArr; ndp_send_reply &rArr; net_icmp6_send &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; debug_info &rArr; net_mac_ntoa &rArr; mac_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_igmp_process
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Notify
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_process
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_run
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_refresh
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_chk_frame
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chk_frame
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_process
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_run
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_process
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_early
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_add
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_update_filter
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[191]"></a>net_eth_is_my_addr</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, net_eth.o(i.net_eth_is_my_addr))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chk_frame
</UL>

<P><STRONG><a name="[e5]"></a>net_eth_output</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, net_eth.o(i.net_eth_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = net_eth_output &rArr; eth_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_unlock
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
</UL>

<P><STRONG><a name="[17f]"></a>net_eth_send_frame</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, net_eth.o(i.net_eth_send_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; debug_info &rArr; net_mac_ntoa &rArr; mac_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_find
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_is_subcast
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_find
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_ntoa
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_is_unspec
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_ntoa
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_output
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_make_mcast6
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_make_mcast4
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_send_frame
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
</UL>

<P><STRONG><a name="[153]"></a>net_eth_set_option</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, net_eth.o(i.net_eth_set_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = net_eth_set_option &rArr; eth_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_unlock
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_opt_len
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_lock
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netIF_SetOption
</UL>

<P><STRONG><a name="[175]"></a>net_eth_update_filter</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, net_eth.o(i.net_eth_update_filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = net_eth_update_filter &rArr; eth_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_igmp_collect_addr
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_is_unspec
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_unlock
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_make_mcast6
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_make_mcast4
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[17c]"></a>net_icmp6_process</STRONG> (Thumb, 386 bytes, Stack size 40 bytes, net_icmp6.o(i.net_icmp6_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = net_icmp6_process &rArr; net_ndp_process &rArr; ndp_send_reply &rArr; net_icmp6_send &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; debug_info &rArr; net_mac_ntoa &rArr; mac_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_comp
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_send_frame
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_checksum
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_tx_netif
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_run
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[149]"></a>net_icmp6_send</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, net_icmp6.o(i.net_icmp6_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = net_icmp6_send &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; debug_info &rArr; net_mac_ntoa &rArr; mac_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_get_solicited
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_tx_offload
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_send_frame
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_checksum
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_send_request
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_send_reply
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_send_echo
</UL>

<P><STRONG><a name="[18c]"></a>net_icmp6_send_echo</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, net_icmp6.o(i.net_icmp6_send_echo))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = net_icmp6_send_echo &rArr; net_icmp6_send &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; debug_info &rArr; net_mac_ntoa &rArr; mac_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_send
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_send_req
</UL>

<P><STRONG><a name="[178]"></a>net_icmp_process</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, net_icmp.o(i.net_icmp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = net_icmp_process &rArr; net_ip4_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; debug_info &rArr; net_mac_ntoa &rArr; mac_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chksum_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_run
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[18e]"></a>net_icmp_send_echo</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, net_icmp.o(i.net_icmp_send_echo))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = net_icmp_send_echo &rArr; net_ip4_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; debug_info &rArr; net_mac_ntoa &rArr; mac_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_tx_offload
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chksum_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_send_req
</UL>

<P><STRONG><a name="[185]"></a>net_igmp_collect_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(i.net_igmp_collect_addr))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_update_filter
</UL>

<P><STRONG><a name="[190]"></a>net_igmp_is_member</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(i.net_igmp_is_member))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chk_frame
</UL>

<P><STRONG><a name="[179]"></a>net_igmp_process</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, net_config.o(i.net_igmp_process))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[19d]"></a>net_ip4_checksum</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, net_ip4.o(i.net_ip4_checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_ip4_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_process
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[177]"></a>net_ip4_chk_frame</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, net_ip4.o(i.net_ip4_chk_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = net_ip4_chk_frame &rArr; debug_info &rArr; net_addr4_ntoa &rArr; ip4_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_igmp_is_member
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_get_chksum
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_is_subcast
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_is_my_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_run
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[120]"></a>net_ip4_chksum_buf</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, net_ip4.o(i.net_ip4_chksum_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = net_ip4_chksum_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_get_chksum
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_send_echo
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
</UL>

<P><STRONG><a name="[164]"></a>net_ip4_get_local</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, net_ip4.o(i.net_ip4_get_local))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_ip4_get_local &rArr; ip4_get_route
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_get_route
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_get_local
</UL>

<P><STRONG><a name="[196]"></a>net_ip4_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, net_ip4.o(i.net_ip4_init))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_init
</UL>

<P><STRONG><a name="[181]"></a>net_ip4_is_subcast</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, net_ip4.o(i.net_ip4_is_subcast))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chk_frame
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
</UL>

<P><STRONG><a name="[18d]"></a>net_ip4_send_frame</STRONG> (Thumb, 310 bytes, Stack size 32 bytes, net_ip4.o(i.net_ip4_send_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = net_ip4_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; debug_info &rArr; net_mac_ntoa &rArr; mac_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_slip_send_frame
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ppp_send_frame
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_get_chksum
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_get_local
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_send_frame
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_send_echo
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
</UL>

<P><STRONG><a name="[18f]"></a>net_ip4_tx_offload</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, net_ip4.o(i.net_ip4_tx_offload))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = net_ip4_tx_offload &rArr; ip4_get_route
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_get_route
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_send_echo
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send
</UL>

<P><STRONG><a name="[186]"></a>net_ip6_checksum</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, net_ip6.o(i.net_ip6_checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_ip6_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_send
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_process
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_process
</UL>

<P><STRONG><a name="[17a]"></a>net_ip6_chk_frame</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, net_ip6.o(i.net_ip6_chk_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = net_ip6_chk_frame &rArr; debug_info &rArr; net_addr6_ntoa &rArr; ip6_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_is_solicited
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_comp
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_run
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[14a]"></a>net_ip6_get_local</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, net_ip6.o(i.net_ip6_get_local))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_ip6_get_local &rArr; ip6_get_route
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_is_unspec
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_get_route
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_send_request
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_get_local
</UL>

<P><STRONG><a name="[197]"></a>net_ip6_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, net_ip6.o(i.net_ip6_init))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_init
</UL>

<P><STRONG><a name="[188]"></a>net_ip6_send_frame</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, net_ip6.o(i.net_ip6_send_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; debug_info &rArr; net_mac_ntoa &rArr; mac_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_copy
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_send_frame
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_send
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_process
</UL>

<P><STRONG><a name="[187]"></a>net_ip6_tx_netif</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_ip6.o(i.net_ip6_tx_netif))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_process
</UL>

<P><STRONG><a name="[18b]"></a>net_ip6_tx_offload</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, net_ip6.o(i.net_ip6_tx_offload))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_ip6_tx_offload &rArr; ip6_get_route
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip6_get_route
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_send
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send
</UL>

<P><STRONG><a name="[7c]"></a>net_loop_iface_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, net_loop.o(i.net_loop_iface_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = net_loop_iface_init
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>net_loop_iface_run</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, net_loop.o(i.net_loop_iface_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = net_loop_iface_run &rArr; net_icmp6_process &rArr; net_ndp_process &rArr; ndp_send_reply &rArr; net_icmp6_send &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; debug_info &rArr; net_mac_ntoa &rArr; mac_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_process
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_chk_frame
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chk_frame
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[194]"></a>net_loop_send_frame</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, net_loop.o(i.net_loop_send_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = net_loop_send_frame &rArr; net_mem_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_send_frame
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
</UL>

<P><STRONG><a name="[f0]"></a>net_mac_ntoa</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_addr.o(i.net_mac_ntoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = net_mac_ntoa &rArr; mac_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mac_ntoa
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_proc_response
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
</UL>

<P><STRONG><a name="[e3]"></a>net_mem_alloc</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, net_mem.o(i.net_mem_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_mem_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_unlock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_send_request
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_send_reply
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_send_echo
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_send_echo
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_get_buf
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_send_frame
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_process
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_update_filter
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_receive
</UL>

<P><STRONG><a name="[1a6]"></a>net_mem_avail</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, net_mem.o(i.net_mem_avail))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
</UL>

<P><STRONG><a name="[e6]"></a>net_mem_free</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, net_mem.o(i.net_mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_unlock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_run
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_send_request
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_send_reply
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_send_echo
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_send_echo
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_free
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_proc_acknr
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_process
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_update_filter
</UL>

<P><STRONG><a name="[15a]"></a>net_mem_init</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, net_mem.o(i.net_mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_mem_init &rArr; osMutexCreate &rArr; svcMutexCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
</UL>

<P><STRONG><a name="[173]"></a>net_memcrc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, net_common.o(i.net_memcrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_memcrc
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
</UL>

<P><STRONG><a name="[85]"></a>net_nbns_client_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, net_nbns_client.o(i.net_nbns_client_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = net_nbns_client_init &rArr; net_udp_open &rArr; udp_port_in_use
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_open
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_get_socket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[183]"></a>net_ndp_cache_find</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, net_ndp.o(i.net_ndp_cache_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = net_ndp_cache_find &rArr; debug_inf2 &rArr; net_addr6_ntoa &rArr; ip6_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_is_onlink
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_cache_alloc
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_is_linklocal
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_comp
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_copy
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_is_unspec
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
</UL>

<P><STRONG><a name="[17b]"></a>net_ndp_cache_refresh</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, net_ndp.o(i.net_ndp_cache_refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = net_ndp_cache_refresh &rArr; debug_inf2 &rArr; net_addr6_ntoa &rArr; ip6_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[172]"></a>net_ndp_init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, net_ndp.o(i.net_ndp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = net_ndp_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_create
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
</UL>

<P><STRONG><a name="[189]"></a>net_ndp_process</STRONG> (Thumb, 700 bytes, Stack size 32 bytes, net_ndp.o(i.net_ndp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = net_ndp_process &rArr; ndp_send_reply &rArr; net_icmp6_send &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; debug_info &rArr; net_mac_ntoa &rArr; mac_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_send_reply
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_proc_response
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_prefix_add
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_next_opt
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_check_frame
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_cache_delete
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_cache_add
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_is_linklocal
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_comp
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mac_ntoa
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_ntoa
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_is_unspec
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_process
</UL>

<P><STRONG><a name="[176]"></a>net_ndp_run</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, net_ndp.o(i.net_ndp_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = net_ndp_run &rArr; ndp_slaac_run &rArr; ndp_send_request &rArr; net_icmp6_send &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; debug_info &rArr; net_mac_ntoa &rArr; mac_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_slaac_run
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_send_request
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_router_remove
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_probe_run
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[7e]"></a>net_ping_client_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, net_ping.o(i.net_ping_client_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = net_ping_client_init
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>net_ping_client_run</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, net_ping.o(i.net_ping_client_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = net_ping_client_run &rArr; ping_send_req &rArr; net_icmp6_send_echo &rArr; net_icmp6_send &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; debug_info &rArr; net_mac_ntoa &rArr; mac_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_send_req
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[192]"></a>net_ppp_send_frame</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(i.net_ppp_send_frame))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
</UL>

<P><STRONG><a name="[154]"></a>net_ppp_set_option</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(i.net_ppp_set_option))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netIF_SetOption
</UL>

<P><STRONG><a name="[fe]"></a>net_rand32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, net_sys.o(i.net_rand32))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp_client_run
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp6_client_run
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_slaac_run
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_proc_tick
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tout
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp6_client_start
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_client_start
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[193]"></a>net_slip_send_frame</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(i.net_slip_send_frame))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
</UL>

<P><STRONG><a name="[155]"></a>net_slip_set_option</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(i.net_slip_set_option))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netIF_SetOption
</UL>

<P><STRONG><a name="[109]"></a>net_strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, net_common.o(i.net_strcpy))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSYS_SetHostName
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp6_send_message
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send_message
</UL>

<P><STRONG><a name="[13b]"></a>net_strtoupper</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, net_common.o(i.net_strtoupper))
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_strtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_strtoupper
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
</UL>

<P><STRONG><a name="[15c]"></a>net_sys_error</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, net_config.o(i.net_sys_error))
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_get_socket
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_get_socket
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
</UL>

<P><STRONG><a name="[14f]"></a>net_sys_lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, net_sys.o(i.net_sys_lock))
<BR><BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTCP_SetOption
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTCP_Listen
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTCP_GetSocket
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSYS_SetHostName
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netIF_SetOption
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netDHCP_Disable
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCore_Thread
</UL>

<P><STRONG><a name="[150]"></a>net_sys_unlock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_sys.o(i.net_sys_unlock))
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTCP_SetOption
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTCP_Listen
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTCP_GetSocket
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSYS_SetHostName
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netIF_SetOption
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netDHCP_Disable
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCore_Thread
</UL>

<P><STRONG><a name="[119]"></a>net_sys_wakeup</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, net_sys.o(i.net_sys_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = net_sys_wakeup &rArr; osSignalSet &rArr; isrSignalSet &rArr; isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalSet
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_tick
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_receive
</UL>

<P><STRONG><a name="[160]"></a>net_tcp_get_socket</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, net_tcp.o(i.net_tcp_get_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = net_tcp_get_socket
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTCP_GetSocket
</UL>

<P><STRONG><a name="[16f]"></a>net_tcp_get_state</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, net_tcp.o(i.net_tcp_get_state))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_bsd_socket_run
</UL>

<P><STRONG><a name="[161]"></a>net_tcp_listen</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, net_tcp.o(i.net_tcp_listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = net_tcp_listen &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTCP_Listen
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_bsd_socket_run
</UL>

<P><STRONG><a name="[17e]"></a>net_tcp_process</STRONG> (Thumb, 2278 bytes, Stack size 48 bytes, net_tcp.o(i.net_tcp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = net_tcp_process &rArr; tcp_send_reset &rArr; tcp_write &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; debug_info &rArr; net_mac_ntoa &rArr; mac_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_rand32
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_cwnd
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_proc_dupack
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_proc_acknr
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parse_opt
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_map_socket
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_checksum
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_run
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[162]"></a>net_tcp_set_option</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, net_tcp.o(i.net_tcp_set_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_tcp_set_option
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTCP_SetOption
</UL>

<P><STRONG><a name="[81]"></a>net_tcp_socket_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, net_tcp.o(i.net_tcp_socket_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = net_tcp_socket_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>net_tcp_socket_run</STRONG> (Thumb, 872 bytes, Stack size 32 bytes, net_tcp.o(i.net_tcp_socket_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = net_tcp_socket_run &rArr; tcp_que_resend &rArr; tcp_send_data &rArr; tcp_write &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; debug_info &rArr; net_mac_ntoa &rArr; mac_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_avail
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_resend
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[10d]"></a>net_udp_close</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, net_udp.o(i.net_udp_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = net_udp_close
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_client_stop
</UL>

<P><STRONG><a name="[107]"></a>net_udp_get_buf</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, net_udp.o(i.net_udp_get_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_udp_get_buf &rArr; net_mem_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp6_send_message
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send_message
</UL>

<P><STRONG><a name="[170]"></a>net_udp_get_socket</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, net_udp.o(i.net_udp_get_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = net_udp_get_socket
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_nbns_client_init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp_client_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp6_client_init
</UL>

<P><STRONG><a name="[fc]"></a>net_udp_open</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, net_udp.o(i.net_udp_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_udp_open &rArr; udp_port_in_use
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_port_in_use
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_nbns_client_init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp6_client_start
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_client_start
</UL>

<P><STRONG><a name="[17d]"></a>net_udp_process</STRONG> (Thumb, 274 bytes, Stack size 32 bytes, net_udp.o(i.net_udp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = net_udp_process &rArr; net_ip6_checksum
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_checksum
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_checksum
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_copy
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_run
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[10a]"></a>net_udp_send</STRONG> (Thumb, 450 bytes, Stack size 40 bytes, net_udp.o(i.net_udp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = net_udp_send &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; debug_info &rArr; net_mac_ntoa &rArr; mac_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_tx_offload
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_send_frame
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_checksum
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_tx_offload
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_checksum
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_is_unspec
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_get_local
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp6_send_message
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send_message
</UL>

<P><STRONG><a name="[80]"></a>net_udp_socket_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, net_udp.o(i.net_udp_socket_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = net_udp_socket_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[d9]"></a>osDelay</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osDelay))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartBeatThread(const void*)
</UL>

<P><STRONG><a name="[a5]"></a>osKernelInitialize</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_cmsis.o(i.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osKernelInitialize &rArr; svcKernelInitialize &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_lib_init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a7]"></a>osKernelStart</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, rt_cmsis.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osKernelStart
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_lib_init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ca]"></a>osKernelSysTick</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osKernelSysTick))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Write
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Read
</UL>

<P><STRONG><a name="[1aa]"></a>osMessageGet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osMessageGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osMessageGet &rArr; isrMessageGet &rArr; isr_mbx_receive &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessageGet
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerThread
</UL>

<P><STRONG><a name="[157]"></a>osMutexCreate</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rt_cmsis.o(i.osMutexCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osMutexCreate &rArr; svcMutexCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_init
</UL>

<P><STRONG><a name="[13a]"></a>osMutexRelease</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osMutexRelease))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_unlock
</UL>

<P><STRONG><a name="[138]"></a>osMutexWait</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osMutexWait))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_lock
</UL>

<P><STRONG><a name="[174]"></a>osSemaphoreCreate</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rt_cmsis.o(i.osSemaphoreCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osSemaphoreCreate &rArr; svcSemaphoreCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
</UL>

<P><STRONG><a name="[11b]"></a>osSemaphoreRelease</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_unlock
</UL>

<P><STRONG><a name="[116]"></a>osSemaphoreWait</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rt_cmsis.o(i.osSemaphoreWait))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_lock
</UL>

<P><STRONG><a name="[14e]"></a>osSignalClear</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rt_cmsis.o(i.osSignalClear))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCore_Thread
</UL>

<P><STRONG><a name="[117]"></a>osSignalSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osSignalSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osSignalSet &rArr; isrSignalSet &rArr; isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrSignalSet
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_bsd_resume
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_wakeup
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_notify
</UL>

<P><STRONG><a name="[14c]"></a>osSignalWait</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osSignalWait))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Thread
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCore_Thread
</UL>

<P><STRONG><a name="[a6]"></a>osThreadCreate</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rt_cmsis.o(i.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osThreadCreate &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_lib_init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
</UL>

<P><STRONG><a name="[5a]"></a>osThreadExit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_cmsis.o(i.osThreadExit))
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.svcThreadCreate)
</UL>
<P><STRONG><a name="[151]"></a>osThreadYield</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osThreadYield))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCore_Thread
</UL>

<P><STRONG><a name="[1ab]"></a>osTimerCall</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_cmsis.o(i.osTimerCall))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerThread
</UL>

<P><STRONG><a name="[15d]"></a>osTimerCreate</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rt_cmsis.o(i.osTimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osTimerCreate &rArr; svcTimerCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
</UL>

<P><STRONG><a name="[15e]"></a>osTimerStart</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osTimerStart))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
</UL>

<P><STRONG><a name="[5d]"></a>osTimerThread</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rt_cmsis.o(i.osTimerThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osTimerThread &rArr; osMessageGet &rArr; isrMessageGet &rArr; isr_mbx_receive &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerCall
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_conf_cm.o(.constdata)
</UL>
<P><STRONG><a name="[1bf]"></a>os_error</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_conf_cm.o(i.os_error))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
</UL>

<P><STRONG><a name="[59]"></a>os_idle_demon</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtx_conf_cm.o(i.os_idle_demon))
<BR>[Address Reference Count : 1]<UL><LI> rt_task.o(i.rt_sys_init)
</UL>
<P><STRONG><a name="[1cc]"></a>os_tick_init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rt_system.o(i.os_tick_init))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_start
</UL>

<P><STRONG><a name="[ac]"></a>os_tick_irqack</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rt_system.o(i.os_tick_irqack), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Handler
</UL>

<P><STRONG><a name="[1d9]"></a>os_tick_ovf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rt_system.o(i.os_tick_ovf))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelSysTick
</UL>

<P><STRONG><a name="[1d8]"></a>os_tick_val</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_system.o(i.os_tick_val))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelSysTick
</UL>

<P><STRONG><a name="[31]"></a>rt_alloc_box</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_membox.o(i.rt_alloc_box))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_cm3.o(.emb_text)
</UL>
<P><STRONG><a name="[1de]"></a>rt_alloc_mem</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, rt_memory.o(i.rt_alloc_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_alloc_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>

<P><STRONG><a name="[1ac]"></a>rt_block</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rt_task.o(i.rt_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_dly
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_wait
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_wait
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dly_wait
</UL>

<P><STRONG><a name="[1b0]"></a>rt_chk_robin</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, rt_robin.o(i.rt_chk_robin))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_chk_robin &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[1b2]"></a>rt_dec_dly</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, rt_list.o(i.rt_dec_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_dec_dly &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[1b3]"></a>rt_dispatch</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rt_task.o(i.rt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_set
</UL>

<P><STRONG><a name="[1b5]"></a>rt_dly_wait</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rt_time.o(i.rt_dly_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_dly_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcDelay
</UL>

<P><STRONG><a name="[1dd]"></a>rt_evt_clr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rt_event.o(i.rt_evt_clr))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSignalClear
</UL>

<P><STRONG><a name="[1b6]"></a>rt_evt_psh</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, rt_event.o(i.rt_evt_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_evt_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[1b9]"></a>rt_evt_set</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, rt_event.o(i.rt_evt_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_evt_set &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSignalSet
</UL>

<P><STRONG><a name="[1ba]"></a>rt_evt_wait</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rt_event.o(i.rt_evt_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_evt_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSignalWait
</UL>

<P><STRONG><a name="[32]"></a>rt_free_box</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, rt_membox.o(i.rt_free_box))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_cm3.o(.emb_text)
</UL>
<P><STRONG><a name="[1df]"></a>rt_free_mem</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rt_memory.o(i.rt_free_mem))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>

<P><STRONG><a name="[1ae]"></a>rt_get_first</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rt_list.o(i.rt_get_first))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[1d3]"></a>rt_get_same_rdy_prio</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_list.o(i.rt_get_same_rdy_prio))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_pass
</UL>

<P><STRONG><a name="[1d6]"></a>rt_init_mem</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memory.o(i.rt_init_mem))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>

<P><STRONG><a name="[1ca]"></a>rt_init_robin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_robin.o(i.rt_init_robin))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[1bc]"></a>rt_init_stack</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, hal_cm.o(i.rt_init_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_init_stack
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
</UL>

<P><STRONG><a name="[12a]"></a>rt_mbx_check</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_mailbox.o(i.rt_mbx_check))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
</UL>

<P><STRONG><a name="[1da]"></a>rt_mbx_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_mailbox.o(i.rt_mbx_init))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageCreate
</UL>

<P><STRONG><a name="[1bd]"></a>rt_mbx_psh</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, rt_mailbox.o(i.rt_mbx_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_mbx_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[1c0]"></a>rt_mbx_wait</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, rt_mailbox.o(i.rt_mbx_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rt_mbx_wait &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageGet
</UL>

<P><STRONG><a name="[1db]"></a>rt_mut_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rt_mutex.o(i.rt_mut_init))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexCreate
</UL>

<P><STRONG><a name="[3f]"></a>rt_mut_release</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, rt_mutex.o(i.rt_mut_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rt_mut_release &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexRelease
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_conf_cm.o(i._mutex_release)
</UL>
<P><STRONG><a name="[3e]"></a>rt_mut_wait</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, rt_mutex.o(i.rt_mut_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_mut_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexWait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_conf_cm.o(i._mutex_acquire)
</UL>
<P><STRONG><a name="[a9]"></a>rt_pop_req</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, rt_system.o(i.rt_pop_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rt_pop_req &rArr; rt_mbx_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[133]"></a>rt_psh_req</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rt_system.o(i.rt_psh_req))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_sem_send
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_receive
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_evt_set
</UL>

<P><STRONG><a name="[132]"></a>rt_psq_enq</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rt_list.o(i.rt_psq_enq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_sem_send
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_receive
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_evt_set
</UL>

<P><STRONG><a name="[1ad]"></a>rt_put_dly</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, rt_list.o(i.rt_put_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_put_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[1b1]"></a>rt_put_prio</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, rt_list.o(i.rt_put_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_pass
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_wait
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>

<P><STRONG><a name="[1b4]"></a>rt_put_rdy_first</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_list.o(i.rt_put_rdy_first))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>

<P><STRONG><a name="[1c1]"></a>rt_resort_prio</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rt_list.o(i.rt_resort_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_resort_prio &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_list
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
</UL>

<P><STRONG><a name="[1be]"></a>rt_ret_val</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm.o(i.rt_ret_val))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
</UL>

<P><STRONG><a name="[1b8]"></a>rt_ret_val2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_cm.o(i.rt_ret_val2))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_set
</UL>

<P><STRONG><a name="[1b7]"></a>rt_rmv_dly</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rt_list.o(i.rt_rmv_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_rmv_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_set
</UL>

<P><STRONG><a name="[1c3]"></a>rt_rmv_list</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, rt_list.o(i.rt_rmv_list))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[1dc]"></a>rt_sem_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_semaphore.o(i.rt_sem_init))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreCreate
</UL>

<P><STRONG><a name="[1c2]"></a>rt_sem_psh</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rt_semaphore.o(i.rt_sem_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_sem_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[1c4]"></a>rt_sem_send</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rt_semaphore.o(i.rt_sem_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_sem_send &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreRelease
</UL>

<P><STRONG><a name="[1c5]"></a>rt_sem_wait</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, rt_semaphore.o(i.rt_sem_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_sem_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreWait
</UL>

<P><STRONG><a name="[a8]"></a>rt_stk_check</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rt_system.o(i.rt_stk_check))
<BR><BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[1af]"></a>rt_switch_req</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_task.o(i.rt_switch_req))
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_task_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_pass
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[1c7]"></a>rt_sys_init</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, rt_task.o(i.rt_sys_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_sys_init &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_robin
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_box
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>

<P><STRONG><a name="[1cb]"></a>rt_sys_start</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, rt_task.o(i.rt_sys_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_sys_start
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelStart
</UL>

<P><STRONG><a name="[aa]"></a>rt_systick</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rt_system.o(i.rt_systick))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_systick &rArr; sysTimerTick &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Handler
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1ce]"></a>rt_tsk_create</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, rt_task.o(i.rt_tsk_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_task_notify
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>

<P><STRONG><a name="[1d0]"></a>rt_tsk_delete</STRONG> (Thumb, 352 bytes, Stack size 40 bytes, rt_task.o(i.rt_tsk_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = rt_tsk_delete &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_list
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_PSP
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_task_notify
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_box
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
</UL>

<P><STRONG><a name="[1d2]"></a>rt_tsk_pass</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rt_task.o(i.rt_tsk_pass))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_tsk_pass &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_same_rdy_prio
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadYield
</UL>

<P><STRONG><a name="[1d4]"></a>rt_tsk_prio</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, rt_task.o(i.rt_tsk_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rt_tsk_prio &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelStart
</UL>

<P><STRONG><a name="[1e0]"></a>rt_tsk_self</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_task.o(i.rt_tsk_self))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadGetId
</UL>

<P><STRONG><a name="[44]"></a>svcDelay</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = svcDelay &rArr; rt_dly_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dly_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osDelay)
</UL>
<P><STRONG><a name="[45]"></a>svcKernelInitialize</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = svcKernelInitialize &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_mem
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osKernelInitialize)
</UL>
<P><STRONG><a name="[46]"></a>svcKernelStart</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = svcKernelStart &rArr; rt_tsk_prio &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osKernelStart)
</UL>
<P><STRONG><a name="[47]"></a>svcKernelSysTick</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcKernelSysTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = svcKernelSysTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_val
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_ovf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osKernelSysTick)
</UL>
<P><STRONG><a name="[1d7]"></a>svcMessageCreate</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcMessageCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcMessageCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_init
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>

<P><STRONG><a name="[48]"></a>svcMessageGet</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, rt_cmsis.o(i.svcMessageGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = svcMessageGet &rArr; rt_mbx_wait &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osMessageGet)
</UL>
<P><STRONG><a name="[49]"></a>svcMutexCreate</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcMutexCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcMutexCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_init
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osMutexCreate)
</UL>
<P><STRONG><a name="[4a]"></a>svcMutexRelease</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = svcMutexRelease &rArr; rt_mut_release &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osMutexRelease)
</UL>
<P><STRONG><a name="[4b]"></a>svcMutexWait</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcMutexWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcMutexWait &rArr; rt_mut_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osMutexWait)
</UL>
<P><STRONG><a name="[4c]"></a>svcSemaphoreCreate</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcSemaphoreCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcSemaphoreCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osSemaphoreCreate)
</UL>
<P><STRONG><a name="[4d]"></a>svcSemaphoreRelease</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = svcSemaphoreRelease &rArr; rt_sem_send &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osSemaphoreRelease)
</UL>
<P><STRONG><a name="[4e]"></a>svcSemaphoreWait</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcSemaphoreWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svcSemaphoreWait &rArr; rt_sem_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osSemaphoreWait)
</UL>
<P><STRONG><a name="[4f]"></a>svcSignalClear</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcSignalClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = svcSignalClear
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tid2ptcb
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_clr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osSignalClear)
</UL>
<P><STRONG><a name="[50]"></a>svcSignalSet</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcSignalSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = svcSignalSet &rArr; rt_evt_set &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tid2ptcb
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osSignalSet)
</UL>
<P><STRONG><a name="[51]"></a>svcSignalWait</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcSignalWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcSignalWait &rArr; rt_evt_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osSignalWait)
</UL>
<P><STRONG><a name="[52]"></a>svcThreadCreate</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_mem
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osThreadCreate)
</UL>
<P><STRONG><a name="[53]"></a>svcThreadGetId</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcThreadGetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_self
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osThreadExit)
</UL>
<P><STRONG><a name="[54]"></a>svcThreadTerminate</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = svcThreadTerminate &rArr; rt_tsk_delete &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tid2ptcb
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_mem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osThreadExit)
</UL>
<P><STRONG><a name="[55]"></a>svcThreadYield</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcThreadYield))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = svcThreadYield &rArr; rt_tsk_pass &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_pass
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osThreadYield)
</UL>
<P><STRONG><a name="[56]"></a>svcTimerCall</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcTimerCall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcTimerCall
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osTimerCall)
</UL>
<P><STRONG><a name="[57]"></a>svcTimerCreate</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcTimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcTimerCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osTimerCreate)
</UL>
<P><STRONG><a name="[58]"></a>svcTimerStart</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcTimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = svcTimerStart &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_remove
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_insert
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osTimerStart)
</UL>
<P><STRONG><a name="[1cd]"></a>sysTimerTick</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, rt_cmsis.o(i.sysTimerTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sysTimerTick &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_insert
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[3b]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[6d]"></a>Control</STRONG> (Thumb, 396 bytes, Stack size 40 bytes, emac_lpc17xx.o(i.Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Control
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_tx_desc
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rx_desc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[6c]"></a>ControlTimer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, emac_lpc17xx.o(i.ControlTimer))
<BR>[Address Reference Count : 1]<UL><LI> emac_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>GetCapabilities</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, emac_lpc17xx.o(i.GetCapabilities))
<BR>[Address Reference Count : 1]<UL><LI> emac_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[64]"></a>GetMacAddress</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, emac_lpc17xx.o(i.GetMacAddress))
<BR>[Address Reference Count : 1]<UL><LI> emac_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>GetRxFrameSize</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, emac_lpc17xx.o(i.GetRxFrameSize))
<BR>[Address Reference Count : 1]<UL><LI> emac_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[6a]"></a>GetRxFrameTime</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, emac_lpc17xx.o(i.GetRxFrameTime))
<BR>[Address Reference Count : 1]<UL><LI> emac_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[6b]"></a>GetTxFrameTime</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, emac_lpc17xx.o(i.GetTxFrameTime))
<BR>[Address Reference Count : 1]<UL><LI> emac_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>GetVersion</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, emac_lpc17xx.o(i.GetVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetVersion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[61]"></a>Initialize</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, emac_lpc17xx.o(i.Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Initialize &rArr; PIN_Configure
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_Configure
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>PHY_Read</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, emac_lpc17xx.o(i.PHY_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = PHY_Read &rArr; output_MDIO &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnaround_MDIO
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_MDIO
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_MDIO
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>PHY_Write</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, emac_lpc17xx.o(i.PHY_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = PHY_Write &rArr; output_MDIO &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnaround_MDIO
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_MDIO
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>PowerControl</STRONG> (Thumb, 458 bytes, Stack size 24 bytes, emac_lpc17xx.o(i.PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PowerControl
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_tx_desc
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rx_desc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[68]"></a>ReadFrame</STRONG> (Thumb, 102 bytes, Stack size 12 bytes, emac_lpc17xx.o(i.ReadFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ReadFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>SendFrame</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, emac_lpc17xx.o(i.SendFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SendFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[66]"></a>SetAddressFilter</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, emac_lpc17xx.o(i.SetAddressFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SetAddressFilter &rArr; crc32_data
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>SetMacAddress</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, emac_lpc17xx.o(i.SetMacAddress))
<BR>[Address Reference Count : 1]<UL><LI> emac_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>Uninitialize</STRONG> (Thumb, 246 bytes, Stack size 8 bytes, emac_lpc17xx.o(i.Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Uninitialize &rArr; PIN_Configure
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_Configure
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[ea]"></a>crc32_8bit_rev</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, emac_lpc17xx.o(i.crc32_8bit_rev))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_data
</UL>

<P><STRONG><a name="[cb]"></a>crc32_data</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, emac_lpc17xx.o(i.crc32_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = crc32_data
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_8bit_rev
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAddressFilter
</UL>

<P><STRONG><a name="[c2]"></a>init_rx_desc</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, emac_lpc17xx.o(i.init_rx_desc))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerControl
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control
</UL>

<P><STRONG><a name="[c3]"></a>init_tx_desc</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, emac_lpc17xx.o(i.init_tx_desc))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerControl
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control
</UL>

<P><STRONG><a name="[c9]"></a>input_MDIO</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, emac_lpc17xx.o(i.input_MDIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = input_MDIO &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortRead
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Read
</UL>

<P><STRONG><a name="[c7]"></a>output_MDIO</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, emac_lpc17xx.o(i.output_MDIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = output_MDIO &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Write
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Read
</UL>

<P><STRONG><a name="[c8]"></a>turnaround_MDIO</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, emac_lpc17xx.o(i.turnaround_MDIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = turnaround_MDIO &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Write
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Read
</UL>

<P><STRONG><a name="[77]"></a>GetLinkInfo</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, phy_lan8720.o(i.GetLinkInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetLinkInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy_lan8720.o(.constdata)
</UL>
<P><STRONG><a name="[76]"></a>GetLinkState</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, phy_lan8720.o(i.GetLinkState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetLinkState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy_lan8720.o(.constdata)
</UL>
<P><STRONG><a name="[70]"></a>GetVersion</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, phy_lan8720.o(i.GetVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetVersion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy_lan8720.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>Initialize</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, phy_lan8720.o(i.Initialize))
<BR>[Address Reference Count : 1]<UL><LI> phy_lan8720.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>PowerControl</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, phy_lan8720.o(i.PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PowerControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy_lan8720.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>SetInterface</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, phy_lan8720.o(i.SetInterface))
<BR>[Address Reference Count : 1]<UL><LI> phy_lan8720.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>SetMode</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, phy_lan8720.o(i.SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy_lan8720.o(.constdata)
</UL>
<P><STRONG><a name="[72]"></a>Uninitialize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, phy_lan8720.o(i.Uninitialize))
<BR>[Address Reference Count : 1]<UL><LI> phy_lan8720.o(.constdata)
</UL>
<P><STRONG><a name="[c4]"></a>Clear_Channel_active_flag</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gpdma_lpc17xx.o(i.Clear_Channel_active_flag))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_IRQHandler
</UL>

<P><STRONG><a name="[12d]"></a>rt_id2obj</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_cmsis.o(i.rt_id2obj))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerStart
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerCall
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreWait
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreRelease
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexWait
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexRelease
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrSemaphoreRelease
</UL>

<P><STRONG><a name="[1d5]"></a>rt_ms2tick</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, rt_cmsis.o(i.rt_ms2tick))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSignalWait
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreWait
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexWait
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageGet
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcDelay
</UL>

<P><STRONG><a name="[130]"></a>rt_tid2ptcb</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.rt_tid2ptcb))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSignalSet
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSignalClear
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrSignalSet
</UL>

<P><STRONG><a name="[1e2]"></a>rt_timer_insert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, rt_cmsis.o(i.rt_timer_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_timer_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerStart
</UL>

<P><STRONG><a name="[1e1]"></a>rt_timer_remove</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_cmsis.o(i.rt_timer_remove))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerStart
</UL>

<P><STRONG><a name="[1bb]"></a>rt_init_context</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rt_task.o(i.rt_init_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_stack
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[f3]"></a>debug_info</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, net_eth.o(i.debug_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = debug_info &rArr; net_mac_ntoa &rArr; mac_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mac_ntoa
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
</UL>

<P><STRONG><a name="[152]"></a>eth_check_link</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, net_eth.o(i.eth_check_link))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eth_check_link
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Thread
</UL>

<P><STRONG><a name="[115]"></a>eth_lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, net_eth.o(i.eth_lock))
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Thread
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_update_filter
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_set_option
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_output
</UL>

<P><STRONG><a name="[180]"></a>eth_make_mcast4</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, net_eth.o(i.eth_make_mcast4))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_update_filter
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
</UL>

<P><STRONG><a name="[182]"></a>eth_make_mcast6</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, net_eth.o(i.eth_make_mcast6))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_update_filter
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
</UL>

<P><STRONG><a name="[42]"></a>eth_notify</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, net_eth.o(i.eth_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = eth_notify &rArr; osSignalSet &rArr; isrSignalSet &rArr; isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_eth.o(i.net_eth_iface_init)
</UL>
<P><STRONG><a name="[184]"></a>eth_opt_len</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, net_eth.o(i.eth_opt_len))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_set_option
</UL>

<P><STRONG><a name="[118]"></a>eth_receive</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, net_eth.o(i.eth_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = eth_receive &rArr; net_sys_wakeup &rArr; osSignalSet &rArr; isrSignalSet &rArr; isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_wakeup
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Thread
</UL>

<P><STRONG><a name="[11a]"></a>eth_unlock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_eth.o(i.eth_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = eth_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Thread
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_update_filter
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_set_option
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_output
</UL>

<P><STRONG><a name="[f4]"></a>debug_info</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, net_loop.o(i.debug_info))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_run
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_send_frame
</UL>

<P><STRONG><a name="[f5]"></a>debug_info</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, net_udp.o(i.debug_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = debug_info
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_process
</UL>

<P><STRONG><a name="[1a9]"></a>udp_port_in_use</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, net_udp.o(i.udp_port_in_use))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp_port_in_use
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_open
</UL>

<P><STRONG><a name="[eb]"></a>debug_inf2</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, net_tcp.o(i.debug_inf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = debug_inf2
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[f6]"></a>debug_info</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, net_tcp.o(i.debug_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = debug_info
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_proc_acknr
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[19c]"></a>tcp_map_socket</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, net_tcp.o(i.tcp_map_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tcp_map_socket
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_comp
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[1a2]"></a>tcp_parse_opt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, net_tcp.o(i.tcp_parse_opt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_parse_opt
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[19f]"></a>tcp_proc_acknr</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, net_tcp.o(i.tcp_proc_acknr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tcp_proc_acknr &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[19e]"></a>tcp_proc_dupack</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, net_tcp.o(i.tcp_proc_dupack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcp_proc_dupack
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_init
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[1a8]"></a>tcp_que_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, net_tcp.o(i.tcp_que_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcp_que_free &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
</UL>

<P><STRONG><a name="[1a7]"></a>tcp_que_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, net_tcp.o(i.tcp_que_init))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_proc_dupack
</UL>

<P><STRONG><a name="[1a5]"></a>tcp_que_resend</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, net_tcp.o(i.tcp_que_resend))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = tcp_que_resend &rArr; tcp_send_data &rArr; tcp_write &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; debug_info &rArr; net_mac_ntoa &rArr; mac_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_data
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
</UL>

<P><STRONG><a name="[1a1]"></a>tcp_send_ctrl</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, net_tcp.o(i.tcp_send_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = tcp_send_ctrl &rArr; tcp_write &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; debug_info &rArr; net_mac_ntoa &rArr; mac_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_resend
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[1e3]"></a>tcp_send_data</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, net_tcp.o(i.tcp_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = tcp_send_data &rArr; tcp_write &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; debug_info &rArr; net_mac_ntoa &rArr; mac_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_resend
</UL>

<P><STRONG><a name="[1a3]"></a>tcp_send_reset</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, net_tcp.o(i.tcp_send_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = tcp_send_reset &rArr; tcp_write &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; debug_info &rArr; net_mac_ntoa &rArr; mac_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[1a4]"></a>tcp_set_cwnd</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, net_tcp.o(i.tcp_set_cwnd))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[1a0]"></a>tcp_transit</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, net_tcp.o(i.tcp_transit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_transit &rArr; tcp_que_free &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_free
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[1e4]"></a>tcp_write</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, net_tcp.o(i.tcp_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = tcp_write &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; debug_info &rArr; net_mac_ntoa &rArr; mac_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_get_local
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_tx_offload
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_send_frame
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_checksum
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_tx_offload
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_data
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
</UL>

<P><STRONG><a name="[e7]"></a>bsd_enable</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, net_bsd.o(i.bsd_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bsd_enable &rArr; net_bsd_resume &rArr; osSignalSet &rArr; isrSignalSet &rArr; isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_bsd_notify
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_bsd_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_bsd_socket_run
</UL>

<P><STRONG><a name="[ec]"></a>debug_inf2</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, net_dhcp_client.o(i.debug_inf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = debug_inf2 &rArr; net_addr4_ntoa &rArr; ip4_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_ntoa
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp_client_run
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_sel
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_req
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_renew
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
</UL>

<P><STRONG><a name="[10b]"></a>dhcp_client_start</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, net_dhcp_client.o(i.dhcp_client_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dhcp_client_start &rArr; net_udp_open &rArr; udp_port_in_use
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_rand32
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_open
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp_client_init
</UL>

<P><STRONG><a name="[10c]"></a>dhcp_client_stop</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, net_dhcp_client.o(i.dhcp_client_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = dhcp_client_stop &rArr; net_addr4_aton &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netDHCP_Notify
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_notify
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_close
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_aton
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netDHCP_Disable
</UL>

<P><STRONG><a name="[41]"></a>dhcp_listener</STRONG> (Thumb, 1724 bytes, Stack size 40 bytes, net_dhcp_client.o(i.dhcp_listener))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = dhcp_listener &rArr; dhcp_send_message &rArr; net_udp_send &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; debug_info &rArr; net_mac_ntoa &rArr; mac_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netDHCP_Notify
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_notify
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_sel
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_req
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_renew
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send_message
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_ntoa
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_dhcp_client.o(i.net_dhcp_client_init)
</UL>
<P><STRONG><a name="[112]"></a>dhcp_send_message</STRONG> (Thumb, 554 bytes, Stack size 48 bytes, net_dhcp_client.o(i.dhcp_send_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = dhcp_send_message &rArr; net_udp_send &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; debug_info &rArr; net_mac_ntoa &rArr; mac_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_strcpy
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_get_buf
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp_client_run
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
</UL>

<P><STRONG><a name="[114]"></a>proc_opt_renew</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, net_dhcp_client.o(i.proc_opt_renew))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = proc_opt_renew &rArr; debug_inf2 &rArr; net_addr4_ntoa &rArr; ip4_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
</UL>

<P><STRONG><a name="[113]"></a>proc_opt_req</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, net_dhcp_client.o(i.proc_opt_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = proc_opt_req &rArr; debug_inf2 &rArr; net_addr4_ntoa &rArr; ip4_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netDHCP_Notify
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_ntoa
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
</UL>

<P><STRONG><a name="[111]"></a>proc_opt_sel</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, net_dhcp_client.o(i.proc_opt_sel))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = proc_opt_sel &rArr; debug_inf2 &rArr; net_addr4_ntoa &rArr; ip4_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
</UL>

<P><STRONG><a name="[100]"></a>check_client_id</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, net_dhcp6_client.o(i.check_client_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = check_client_id
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp6_listener
</UL>

<P><STRONG><a name="[ee]"></a>debug_inf2</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, net_dhcp6_client.o(i.debug_inf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = debug_inf2 &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_server
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp6_send_message
</UL>

<P><STRONG><a name="[fb]"></a>dhcp6_client_start</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, net_dhcp6_client.o(i.dhcp6_client_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dhcp6_client_start &rArr; net_udp_open &rArr; udp_port_in_use
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_rand32
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_copy
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_open
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp6_client_init
</UL>

<P><STRONG><a name="[40]"></a>dhcp6_listener</STRONG> (Thumb, 1520 bytes, Stack size 40 bytes, net_dhcp6_client.o(i.dhcp6_listener))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = dhcp6_listener &rArr; proc_opt_ia_na &rArr; net_addr6_ntoa &rArr; ip6_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netDHCP6_Notify
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stat_ascii
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_server
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_ia_na
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_ascii
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_client_id
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_copy
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_ntoa
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_dhcp6_client.o(i.net_dhcp6_client_init)
</UL>
<P><STRONG><a name="[106]"></a>dhcp6_send_message</STRONG> (Thumb, 474 bytes, Stack size 48 bytes, net_dhcp6_client.o(i.dhcp6_send_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = dhcp6_send_message &rArr; net_udp_send &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; debug_info &rArr; net_mac_ntoa &rArr; mac_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_ascii
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_strcpy
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_copy
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_get_buf
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp6_client_run
</UL>

<P><STRONG><a name="[11c]"></a>get_tout</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, net_dhcp6_client.o(i.get_tout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_tout
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_rand32
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp6_client_run
</UL>

<P><STRONG><a name="[ff]"></a>msg_ascii</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, net_dhcp6_client.o(i.msg_ascii))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp6_send_message
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp6_listener
</UL>

<P><STRONG><a name="[102]"></a>proc_opt_ia_na</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, net_dhcp6_client.o(i.proc_opt_ia_na))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = proc_opt_ia_na &rArr; net_addr6_ntoa &rArr; ip6_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stat_ascii
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_comp
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_copy
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_ntoa
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp6_listener
</UL>

<P><STRONG><a name="[101]"></a>select_server</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, net_dhcp6_client.o(i.select_server))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = select_server &rArr; debug_inf2 &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp6_listener
</UL>

<P><STRONG><a name="[103]"></a>stat_ascii</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_dhcp6_client.o(i.stat_ascii))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_ia_na
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp6_listener
</UL>

<P><STRONG><a name="[43]"></a>nbns_listener</STRONG> (Thumb, 406 bytes, Stack size 40 bytes, net_nbns_client.o(i.nbns_listener))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = nbns_listener &rArr; net_udp_send &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; debug_info &rArr; net_mac_ntoa &rArr; mac_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_strtoupper
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_get_buf
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_ntoa
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_nbns_client.o(i.net_nbns_client_init)
</UL>
<P><STRONG><a name="[19b]"></a>ping_send_req</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, net_ping.o(i.ping_send_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = ping_send_req &rArr; net_icmp6_send_echo &rArr; net_icmp6_send &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; debug_info &rArr; net_mac_ntoa &rArr; mac_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_send_echo
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_send_echo
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ping_client_run
</UL>

<P><STRONG><a name="[8a]"></a>net_sys_tick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, net_sys.o(i.net_sys_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = net_sys_tick &rArr; net_sys_wakeup &rArr; osSignalSet &rArr; isrSignalSet &rArr; isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_wakeup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_sys.o(.constdata)
</UL>
<P><STRONG><a name="[14d]"></a>sys_proc_tick</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, net_sys.o(i.sys_proc_tick))
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_rand32
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCore_Thread
</UL>

<P><STRONG><a name="[123]"></a>ip4_ntoa</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, net_addr.o(i.ip4_ntoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = ip4_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_ntoa
</UL>

<P><STRONG><a name="[126]"></a>ip6_ntoa</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, net_addr.o(i.ip6_ntoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ip6_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_ntoa
</UL>

<P><STRONG><a name="[134]"></a>mac_ntoa</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, net_addr.o(i.mac_ntoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = mac_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mac_ntoa
</UL>

<P><STRONG><a name="[dc]"></a>arp_cache_alloc</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, net_arp.o(i.arp_cache_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = arp_cache_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_find
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_early
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_add
</UL>

<P><STRONG><a name="[168]"></a>arp_is_cacheable</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, net_arp.o(i.arp_is_cacheable))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_early
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_add
</UL>

<P><STRONG><a name="[de]"></a>arp_probe_run</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, net_arp.o(i.arp_probe_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = arp_probe_run &rArr; arp_send_request &rArr; debug_info &rArr; net_mac_ntoa &rArr; mac_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_run
</UL>

<P><STRONG><a name="[e1]"></a>arp_proc_response</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, net_arp.o(i.arp_proc_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = arp_proc_response
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_process
</UL>

<P><STRONG><a name="[e2]"></a>arp_send_reply</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, net_arp.o(i.arp_send_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = arp_send_reply &rArr; debug_info &rArr; net_mac_ntoa &rArr; mac_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_output
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_process
</UL>

<P><STRONG><a name="[e0]"></a>arp_send_request</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, net_arp.o(i.arp_send_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = arp_send_request &rArr; debug_info &rArr; net_mac_ntoa &rArr; mac_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_output
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_probe_run
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_probe
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_notify
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_run
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_find
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_early
</UL>

<P><STRONG><a name="[ef]"></a>debug_inf2</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, net_arp.o(i.debug_inf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = debug_inf2 &rArr; net_mac_ntoa &rArr; mac_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mac_ntoa
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_ntoa
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_run
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_find
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_early
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_add
</UL>

<P><STRONG><a name="[e4]"></a>debug_info</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, net_arp.o(i.debug_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = debug_info &rArr; net_mac_ntoa &rArr; mac_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mac_ntoa
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_ntoa
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_process
</UL>

<P><STRONG><a name="[f1]"></a>debug_inf2</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, net_ndp.o(i.debug_inf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = debug_inf2 &rArr; net_addr6_ntoa &rArr; ip6_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mac_ntoa
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_ntoa
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_cache_delete
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_cache_add
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_run
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_refresh
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_find
</UL>

<P><STRONG><a name="[13c]"></a>ndp_cache_add</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, net_ndp.o(i.ndp_cache_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = ndp_cache_add &rArr; debug_inf2 &rArr; net_addr6_ntoa &rArr; ip6_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_cache_alloc
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_comp
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
</UL>

<P><STRONG><a name="[13d]"></a>ndp_cache_alloc</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, net_ndp.o(i.ndp_cache_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ndp_cache_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_cache_add
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_find
</UL>

<P><STRONG><a name="[13e]"></a>ndp_cache_delete</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, net_ndp.o(i.ndp_cache_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = ndp_cache_delete &rArr; debug_inf2 &rArr; net_addr6_ntoa &rArr; ip6_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_router_remove
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_inf2
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
</UL>

<P><STRONG><a name="[19a]"></a>ndp_check_frame</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, net_ndp.o(i.ndp_check_frame))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
</UL>

<P><STRONG><a name="[140]"></a>ndp_is_onlink</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, net_ndp.o(i.ndp_is_onlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ndp_is_onlink &rArr; net_addr6_is_onlink
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_is_onlink
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_cache_find
</UL>

<P><STRONG><a name="[147]"></a>ndp_next_opt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, net_ndp.o(i.ndp_next_opt))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_proc_response
</UL>

<P><STRONG><a name="[142]"></a>ndp_prefix_add</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, net_ndp.o(i.ndp_prefix_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ndp_prefix_add &rArr; net_addr6_ntoa &rArr; ip6_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_create
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_ntoa
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
</UL>

<P><STRONG><a name="[144]"></a>ndp_probe_run</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, net_ndp.o(i.ndp_probe_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = ndp_probe_run &rArr; ndp_send_request &rArr; net_icmp6_send &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; debug_info &rArr; net_mac_ntoa &rArr; mac_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_send_request
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_run
</UL>

<P><STRONG><a name="[146]"></a>ndp_proc_response</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, net_ndp.o(i.ndp_proc_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ndp_proc_response &rArr; net_mac_ntoa &rArr; mac_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_error
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_next_opt
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_comp
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mac_ntoa
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
</UL>

<P><STRONG><a name="[13f]"></a>ndp_router_remove</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, net_ndp.o(i.ndp_router_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ndp_router_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_cache_delete
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_run
</UL>

<P><STRONG><a name="[148]"></a>ndp_send_reply</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, net_ndp.o(i.ndp_send_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = ndp_send_reply &rArr; net_icmp6_send &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; debug_info &rArr; net_mac_ntoa &rArr; mac_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_send
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_copy
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_ntoa
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_process
</UL>

<P><STRONG><a name="[145]"></a>ndp_send_request</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, net_ndp.o(i.ndp_send_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = ndp_send_request &rArr; net_icmp6_send &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; debug_info &rArr; net_mac_ntoa &rArr; mac_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_send
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_get_local
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_copy
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_ntoa
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_slaac_run
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_probe_run
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_run
</UL>

<P><STRONG><a name="[14b]"></a>ndp_slaac_run</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, net_ndp.o(i.ndp_slaac_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = ndp_slaac_run &rArr; ndp_send_request &rArr; net_icmp6_send &rArr; net_ip6_send_frame &rArr; net_eth_send_frame &rArr; net_arp_cache_find &rArr; arp_send_request &rArr; debug_info &rArr; net_mac_ntoa &rArr; mac_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndp_send_request
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_create
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_rand32
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_ntoa
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ndp_run
</UL>

<P><STRONG><a name="[f7]"></a>debug_info</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, net_ip4.o(i.debug_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = debug_info &rArr; net_addr4_ntoa &rArr; ip4_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_ntoa
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chk_frame
</UL>

<P><STRONG><a name="[11f]"></a>ip4_get_chksum</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, net_ip4.o(i.ip4_get_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ip4_get_chksum &rArr; net_ip4_chksum_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chksum_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chk_frame
</UL>

<P><STRONG><a name="[121]"></a>ip4_get_route</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, net_ip4.o(i.ip4_get_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ip4_get_route
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_is_subnet
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_get_local
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_tx_offload
</UL>

<P><STRONG><a name="[f8]"></a>debug_info</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, net_ip6.o(i.debug_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = debug_info &rArr; net_addr6_ntoa &rArr; ip6_ntoa &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_ntoa
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_send_frame
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_chk_frame
</UL>

<P><STRONG><a name="[124]"></a>ip6_get_route</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, net_ip6.o(i.ip6_get_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ip6_get_route
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr6_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_get_local
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip6_tx_offload
</UL>

<P><STRONG><a name="[f9]"></a>debug_info</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, net_icmp.o(i.debug_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = debug_info
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_send_echo
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
</UL>

<P><STRONG><a name="[fa]"></a>debug_info</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, net_icmp6.o(i.debug_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = debug_info
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dbg_info
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_send
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp6_process
</UL>

<P><STRONG><a name="[137]"></a>mem_lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, net_mem.o(i.mem_lock))
<BR><BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
</UL>

<P><STRONG><a name="[139]"></a>mem_unlock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_mem.o(i.mem_unlock))
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
</UL>

<P><STRONG><a name="[198]"></a>get_crc32</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, net_common.o(i.get_crc32))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_memcrc
</UL>

<P><STRONG><a name="[38]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[39]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
